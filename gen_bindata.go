// +build ignore

package main

import (
	"flag"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"os"
	"path"
	"strings"
	"text/template"
)

var Usage = func() {
	fmt.Fprintf(os.Stderr, "Usage: %s [options] <directories>\n", os.Args[0])
	flag.PrintDefaults()
}

type fileInfo struct {
	Name         string
	Offset, Size int64
}

func main() {
	var prefix, pkg, outfile, gofile string

	var bindata []fileInfo

	flag.StringVar(&prefix, "prefix", "", "Optional path prefix to strip off asset names.")
	flag.StringVar(&pkg, "pkg", "main", "Package name to use in the generated code.")
	flag.StringVar(&outfile, "o", "./bindata", "Optional name of the output file to be generated.")
	flag.StringVar(&gofile, "gofile", "./bindata.go", "Optional name of the go file to be generated.")
	flag.Parse()

	if flag.NArg() == 0 {
		Usage()
		os.Exit(1)
	}

	outf, err := os.Create(outfile)
	if err != nil {
		log.Fatal(err)
	}
	defer outf.Close()

	var offset int64 = 0

	for _, dir := range flag.Args() {
		files, err := ioutil.ReadDir(dir)
		if err != nil {
			log.Fatal(err)
		}
		for _, f := range files {
			filePath := path.Join(dir, f.Name())
			p := strings.TrimPrefix(filePath, prefix)

			inf, err := os.Open(filePath)
			if err != nil {
				log.Fatal(err)
			}

			size, err := io.Copy(outf, inf)
			inf.Close()
			if err != nil {
				log.Fatal(err)
			}

			bindata = append(bindata, fileInfo{Name: p, Offset: offset, Size: size})
			fmt.Fprintf(os.Stderr, "%s: %d %d\n", p, offset, size)
			offset += size
		}
	}

	f, err := os.Create(gofile)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	packageTemplate.Execute(f, struct {
		OutFile     string
		Pkg         string
		BinData     []fileInfo
		BinDataSize int64
	}{
		OutFile:     outfile,
		Pkg:         pkg,
		BinData:     bindata,
		BinDataSize: offset,
	})

}

var packageTemplate = template.Must(template.New("").Parse(`// Code generated by go generate; DO NOT EDIT.

// datafile: {{ .OutFile }}

package {{ .Pkg }}

var (
	BinData = map[string]struct{ offset, size int64 }{
	{{ range .BinData }}
		"{{ .Name }}": { {{ .Offset }}, {{ .Size }}}, {{ end }}
	}

	BinDataSize int64 = {{ .BinDataSize }}
)

`))
